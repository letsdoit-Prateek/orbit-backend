#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require("http");
const app = require("../app");
const MongoDB = require("../provider/mongoDB");

// ASCII Art
const figlet = require("figlet");
figlet.text("ORBIT", async function (_, text) {
  console.info("\x1b[34m", "");
  console.info(text);
  console.info("\x1b[0m", "");
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }
  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error("\x1b[31m", "!! " + bind + " is already in use. !!");
      console.error("\x1b[0m", "");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.info("\x1b[32m", "Listening on " + bind);
  console.info("\x1b[0m", "");
}

/**
 * Connect to MongoDB.
 */
MongoDB.connect();

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// Capture SIGINT signal for process
process.on("SIGINT", () => {
  MongoDB.disconnect();
  server.close(() => {
    console.log("Server was shut down or closed!");
    process.exit(0);
  });
});
